# -*- coding: utf-8 -*-
"""Celsius to Fahrenheit Machine Learning Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12v_62xBhz0GMMvilSmzZrqVQigUVtzwD

Setting Up Env
"""

import tensorflow as tf #use only to display errors
import numpy as np
import logging
logger = tf.get_logger()
logger.setLevel(logging.ERROR)

"""Give TensorFlow some Celsius values and Corresponding Fahrenheit Values
[-40, -10 , 0 , 8 , 15 , 22 , 38] => [-40, 14, 32, 46 , 59 , 72 , 100] **(Approx)** 
"""

#q is for question , a for answer
celsius_q = np.array([-40,-10,0,8,15,22,38], dtype=float)
farhenheit_a = np.array([-40,14,32,46,59,72,100] , dtype=float)

for i,c in enumerate(celsius_q):
  print('Celsius : {} , Fahrenheit : {}'.format(c, farhenheit_a[i]))

"""Creating first (and only) layer"""

layer0 = tf.keras.layers.Dense(input_shape = [1] , units = 1)

"""Assembling layer(s) into model"""

model = tf.keras.Sequential([layer0])

"""Compiling model with loss and optimizers"""

model.compile(loss='mean_squared_error',optimizer = tf.keras.optimizers.Adam(0.1))

"""Train the model"""

history = model.fit(celsius_q, farhenheit_a , epochs=500 , verbose = False)
print('Successfully Trained')

"""Checking the Graph"""

import matplotlib.pyplot as plt
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.plot(history.history['loss'])

"""Predict the next values using model.predict"""

print(model.predict([100.0]))

"""Checking the layer weights"""

print('Weights of layer0 are {}'.format(layer0.get_weights()))